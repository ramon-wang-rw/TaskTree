{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post(\"http://localhost:5000/register\", userData).then(res => history.push(\"/login\")) // re-direct to login on successful register\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"http://localhost:5000/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const token = res.data.toke;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token);\n    console.log(decoded); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/alexandrajaccard/Documents/GitHub/TaskTree/frontend/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","toke","localStorage","setItem","decoded","console","log","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAwBC,QAAD,IAAc;AAC/DT,EAAAA,KAAK,CACFU,IADH,CACQ,gCADR,EAC0CH,QAD1C,EAEGI,IAFH,CAESC,GAAD,IAASJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFjB,EAEyC;AAFzC,GAGGC,KAHH,CAGUC,GAAD,IACLN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEb,UADC;AAEPc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAJZ;AASD,CAVM,C,CAWP;;AACA,OAAO,MAAMC,SAAS,GAAIb,QAAD,IAAeE,QAAD,IAAc;AACnDT,EAAAA,KAAK,CACFU,IADH,CACQ,6BADR,EACuCH,QADvC,EAEGI,IAFH,CAESC,GAAD,IAAS;AACb;AACA;AACA,UAAMS,KAAK,GAAGT,GAAG,CAACO,IAAJ,CAASG,IAAvB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EAJa,CAKb;;AACApB,IAAAA,YAAY,CAACoB,KAAD,CAAZ,CANa,CAOb;;AACA,UAAMI,OAAO,GAAGvB,UAAU,CAACmB,KAAD,CAA1B;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EATa,CAUb;;AACAhB,IAAAA,QAAQ,CAACmB,cAAc,CAACH,OAAD,CAAf,CAAR;AACD,GAdH,EAeGX,KAfH,CAeUC,GAAD,IACLN,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEb,UADC;AAEPc,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAhBZ;AAqBD,CAtBM,C,CAuBP;;AACA,OAAO,MAAMS,cAAc,GAAIH,OAAD,IAAa;AACzC,SAAO;AACLT,IAAAA,IAAI,EAAEZ,gBADD;AAELa,IAAAA,OAAO,EAAEQ;AAFJ,GAAP;AAID,CALM,C,CAMP;;AACA,OAAO,MAAMI,cAAc,GAAG,MAAM;AAClC,SAAO;AACLb,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD,CAJM,C,CAKP;;AACA,OAAO,MAAMyB,UAAU,GAAG,MAAOrB,QAAD,IAAc;AAC5C;AACAc,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB,EAF4C,CAG5C;;AACA9B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ4C,CAK5C;;AACAQ,EAAAA,QAAQ,CAACmB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n// Register User\nexport const registerUser = (userData, history) => (dispatch) => {\n  axios\n    .post(\"http://localhost:5000/register\", userData)\n    .then((res) => history.push(\"/login\")) // re-direct to login on successful register\n    .catch((err) =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Login - get user token\nexport const loginUser = (userData) => (dispatch) => {\n  axios\n    .post(\"http://localhost:5000/login\", userData)\n    .then((res) => {\n      // Save to localStorage\n      // Set token to localStorage\n      const token = res.data.toke;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      console.log(decoded);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch((err) =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data,\n      })\n    );\n};\n// Set logged in user\nexport const setCurrentUser = (decoded) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded,\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING,\n  };\n};\n// Log user out\nexport const logoutUser = () => (dispatch) => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}